// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.computerlyrik.lf.webapp;

import de.computerlyrik.lf.webapp.Area;
import de.computerlyrik.lf.webapp.DelegatingInterestSnapshot;
import de.computerlyrik.lf.webapp.DelegatingPopulationSnapshot;
import de.computerlyrik.lf.webapp.DelegatingVoter;
import de.computerlyrik.lf.webapp.Delegation;
import de.computerlyrik.lf.webapp.DirectInterestSnapshot;
import de.computerlyrik.lf.webapp.DirectPopulationSnapshot;
import de.computerlyrik.lf.webapp.DirectVoter;
import de.computerlyrik.lf.webapp.Event;
import de.computerlyrik.lf.webapp.Initiative;
import de.computerlyrik.lf.webapp.Issue;
import de.computerlyrik.lf.webapp.IssueSetting;
import de.computerlyrik.lf.webapp.Member;
import de.computerlyrik.lf.webapp.Policy;
import java.util.Calendar;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import org.springframework.format.annotation.DateTimeFormat;

privileged aspect Issue_Roo_DbManaged {
    
    @ManyToMany
    @JoinTable(name = "interest", joinColumns = { @JoinColumn(name = "issue_id", nullable = false) }, inverseJoinColumns = { @JoinColumn(name = "member_id", nullable = false) })
    private Set<Member> Issue.members;
    
    @ManyToMany
    @JoinTable(name = "non_voter", joinColumns = { @JoinColumn(name = "issue_id", nullable = false) }, inverseJoinColumns = { @JoinColumn(name = "member_id", nullable = false) })
    private Set<Member> Issue.members1;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<DelegatingInterestSnapshot> Issue.delegatingInterestSnapshots;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<DelegatingPopulationSnapshot> Issue.delegatingPopulationSnapshots;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<DelegatingVoter> Issue.delegatingVoters;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<Delegation> Issue.delegations;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<DirectInterestSnapshot> Issue.directInterestSnapshots;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<DirectPopulationSnapshot> Issue.directPopulationSnapshots;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<DirectVoter> Issue.directVoters;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<Event> Issue.events;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<Initiative> Issue.initiatives;
    
    @OneToMany(mappedBy = "issueId", cascade = CascadeType.ALL)
    private Set<IssueSetting> Issue.issueSettings;
    
    @ManyToOne
    @JoinColumn(name = "area_id", referencedColumnName = "id", nullable = false)
    private Area Issue.areaId;
    
    @ManyToOne
    @JoinColumn(name = "policy_id", referencedColumnName = "id", nullable = false)
    private Policy Issue.policyId;
    
    @Column(name = "state")
    @NotNull
    private String Issue.state;
    
    @Column(name = "created", updatable = false)
    @NotNull
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Issue.created = java.util.Calendar.getInstance();
    
    @Column(name = "accepted")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Issue.accepted;
    
    @Column(name = "half_frozen")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Issue.halfFrozen;
    
    @Column(name = "fully_frozen")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Issue.fullyFrozen;
    
    @Column(name = "closed")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Issue.closed;
    
    @Column(name = "ranks_available")
    @NotNull
    private boolean Issue.ranksAvailable;
    
    @Column(name = "cleaned")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Issue.cleaned;
    
    @Column(name = "admission_time", length = 49)
    private String Issue.admissionTime;
    
    @Column(name = "discussion_time", length = 49)
    @NotNull
    private String Issue.discussionTime;
    
    @Column(name = "verification_time", length = 49)
    @NotNull
    private String Issue.verificationTime;
    
    @Column(name = "voting_time", length = 49)
    @NotNull
    private String Issue.votingTime;
    
    @Column(name = "snapshot")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Issue.snapshot;
    
    @Column(name = "latest_snapshot_event")
    private String Issue.latestSnapshotEvent;
    
    @Column(name = "population")
    private Integer Issue.population;
    
    @Column(name = "voter_count")
    private Integer Issue.voterCount;
    
    @Column(name = "status_quo_schulze_rank")
    private Integer Issue.statusQuoSchulzeRank;
    
    public Set<Member> Issue.getMembers() {
        return members;
    }
    
    public void Issue.setMembers(Set<Member> members) {
        this.members = members;
    }
    
    public Set<Member> Issue.getMembers1() {
        return members1;
    }
    
    public void Issue.setMembers1(Set<Member> members1) {
        this.members1 = members1;
    }
    
    public Set<DelegatingInterestSnapshot> Issue.getDelegatingInterestSnapshots() {
        return delegatingInterestSnapshots;
    }
    
    public void Issue.setDelegatingInterestSnapshots(Set<DelegatingInterestSnapshot> delegatingInterestSnapshots) {
        this.delegatingInterestSnapshots = delegatingInterestSnapshots;
    }
    
    public Set<DelegatingPopulationSnapshot> Issue.getDelegatingPopulationSnapshots() {
        return delegatingPopulationSnapshots;
    }
    
    public void Issue.setDelegatingPopulationSnapshots(Set<DelegatingPopulationSnapshot> delegatingPopulationSnapshots) {
        this.delegatingPopulationSnapshots = delegatingPopulationSnapshots;
    }
    
    public Set<DelegatingVoter> Issue.getDelegatingVoters() {
        return delegatingVoters;
    }
    
    public void Issue.setDelegatingVoters(Set<DelegatingVoter> delegatingVoters) {
        this.delegatingVoters = delegatingVoters;
    }
    
    public Set<Delegation> Issue.getDelegations() {
        return delegations;
    }
    
    public void Issue.setDelegations(Set<Delegation> delegations) {
        this.delegations = delegations;
    }
    
    public Set<DirectInterestSnapshot> Issue.getDirectInterestSnapshots() {
        return directInterestSnapshots;
    }
    
    public void Issue.setDirectInterestSnapshots(Set<DirectInterestSnapshot> directInterestSnapshots) {
        this.directInterestSnapshots = directInterestSnapshots;
    }
    
    public Set<DirectPopulationSnapshot> Issue.getDirectPopulationSnapshots() {
        return directPopulationSnapshots;
    }
    
    public void Issue.setDirectPopulationSnapshots(Set<DirectPopulationSnapshot> directPopulationSnapshots) {
        this.directPopulationSnapshots = directPopulationSnapshots;
    }
    
    public Set<DirectVoter> Issue.getDirectVoters() {
        return directVoters;
    }
    
    public void Issue.setDirectVoters(Set<DirectVoter> directVoters) {
        this.directVoters = directVoters;
    }
    
    public Set<Event> Issue.getEvents() {
        return events;
    }
    
    public void Issue.setEvents(Set<Event> events) {
        this.events = events;
    }
    
    public Set<Initiative> Issue.getInitiatives() {
        return initiatives;
    }
    
    public void Issue.setInitiatives(Set<Initiative> initiatives) {
        this.initiatives = initiatives;
    }
    
    public Set<IssueSetting> Issue.getIssueSettings() {
        return issueSettings;
    }
    
    public void Issue.setIssueSettings(Set<IssueSetting> issueSettings) {
        this.issueSettings = issueSettings;
    }
    
    public Area Issue.getAreaId() {
        return areaId;
    }
    
    public void Issue.setAreaId(Area areaId) {
        this.areaId = areaId;
    }
    
    public Policy Issue.getPolicyId() {
        return policyId;
    }
    
    public void Issue.setPolicyId(Policy policyId) {
        this.policyId = policyId;
    }
    
    public String Issue.getState() {
        return state;
    }
    
    public void Issue.setState(String state) {
        this.state = state;
    }
    
    public Calendar Issue.getCreated() {
        return created;
    }
    
    public void Issue.setCreated(Calendar created) {
        this.created = created;
    }
    
    public Calendar Issue.getAccepted() {
        return accepted;
    }
    
    public void Issue.setAccepted(Calendar accepted) {
        this.accepted = accepted;
    }
    
    public Calendar Issue.getHalfFrozen() {
        return halfFrozen;
    }
    
    public void Issue.setHalfFrozen(Calendar halfFrozen) {
        this.halfFrozen = halfFrozen;
    }
    
    public Calendar Issue.getFullyFrozen() {
        return fullyFrozen;
    }
    
    public void Issue.setFullyFrozen(Calendar fullyFrozen) {
        this.fullyFrozen = fullyFrozen;
    }
    
    public Calendar Issue.getClosed() {
        return closed;
    }
    
    public void Issue.setClosed(Calendar closed) {
        this.closed = closed;
    }
    
    public boolean Issue.isRanksAvailable() {
        return ranksAvailable;
    }
    
    public void Issue.setRanksAvailable(boolean ranksAvailable) {
        this.ranksAvailable = ranksAvailable;
    }
    
    public Calendar Issue.getCleaned() {
        return cleaned;
    }
    
    public void Issue.setCleaned(Calendar cleaned) {
        this.cleaned = cleaned;
    }
    
    public String Issue.getAdmissionTime() {
        return admissionTime;
    }
    
    public void Issue.setAdmissionTime(String admissionTime) {
        this.admissionTime = admissionTime;
    }
    
    public String Issue.getDiscussionTime() {
        return discussionTime;
    }
    
    public void Issue.setDiscussionTime(String discussionTime) {
        this.discussionTime = discussionTime;
    }
    
    public String Issue.getVerificationTime() {
        return verificationTime;
    }
    
    public void Issue.setVerificationTime(String verificationTime) {
        this.verificationTime = verificationTime;
    }
    
    public String Issue.getVotingTime() {
        return votingTime;
    }
    
    public void Issue.setVotingTime(String votingTime) {
        this.votingTime = votingTime;
    }
    
    public Calendar Issue.getSnapshot() {
        return snapshot;
    }
    
    public void Issue.setSnapshot(Calendar snapshot) {
        this.snapshot = snapshot;
    }
    
    public String Issue.getLatestSnapshotEvent() {
        return latestSnapshotEvent;
    }
    
    public void Issue.setLatestSnapshotEvent(String latestSnapshotEvent) {
        this.latestSnapshotEvent = latestSnapshotEvent;
    }
    
    public Integer Issue.getPopulation() {
        return population;
    }
    
    public void Issue.setPopulation(Integer population) {
        this.population = population;
    }
    
    public Integer Issue.getVoterCount() {
        return voterCount;
    }
    
    public void Issue.setVoterCount(Integer voterCount) {
        this.voterCount = voterCount;
    }
    
    public Integer Issue.getStatusQuoSchulzeRank() {
        return statusQuoSchulzeRank;
    }
    
    public void Issue.setStatusQuoSchulzeRank(Integer statusQuoSchulzeRank) {
        this.statusQuoSchulzeRank = statusQuoSchulzeRank;
    }
    
}
