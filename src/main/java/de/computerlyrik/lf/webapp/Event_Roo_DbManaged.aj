// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.computerlyrik.lf.webapp;

import de.computerlyrik.lf.webapp.Draft;
import de.computerlyrik.lf.webapp.Event;
import de.computerlyrik.lf.webapp.Initiative;
import de.computerlyrik.lf.webapp.Issue;
import de.computerlyrik.lf.webapp.Member;
import de.computerlyrik.lf.webapp.Suggestion;
import java.util.Calendar;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import org.springframework.format.annotation.DateTimeFormat;

privileged aspect Event_Roo_DbManaged {
    
    @ManyToOne
    @JoinColumns({ @JoinColumn(name = "initiative_id", referencedColumnName = "initiative_id", nullable = true, insertable = false, updatable = false), @JoinColumn(name = "draft_id", referencedColumnName = "id", nullable = true, insertable = false, updatable = false) })
    private Draft Event.draft;
    
    @ManyToOne
    @JoinColumns({ @JoinColumn(name = "issue_id", referencedColumnName = "issue_id", nullable = true, insertable = false, updatable = false), @JoinColumn(name = "initiative_id", referencedColumnName = "id", nullable = true, insertable = false, updatable = false) })
    private Initiative Event.initiative;
    
    @ManyToOne
    @JoinColumn(name = "issue_id", referencedColumnName = "id", insertable = false, updatable = false)
    private Issue Event.issueId;
    
    @ManyToOne
    @JoinColumn(name = "member_id", referencedColumnName = "id")
    private Member Event.memberId;
    
    @ManyToOne
    @JoinColumns({ @JoinColumn(name = "initiative_id", referencedColumnName = "initiative_id", nullable = true, insertable = false, updatable = false), @JoinColumn(name = "suggestion_id", referencedColumnName = "id", nullable = true, insertable = false, updatable = false) })
    private Suggestion Event.suggestion;
    
    @Column(name = "occurrence")
    @NotNull
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar Event.occurrence;
    
    @Column(name = "event")
    @NotNull
    private String Event.event;
    
    @Column(name = "state")
    private String Event.state;
    
    public Draft Event.getDraft() {
        return draft;
    }
    
    public void Event.setDraft(Draft draft) {
        this.draft = draft;
    }
    
    public Initiative Event.getInitiative() {
        return initiative;
    }
    
    public void Event.setInitiative(Initiative initiative) {
        this.initiative = initiative;
    }
    
    public Issue Event.getIssueId() {
        return issueId;
    }
    
    public void Event.setIssueId(Issue issueId) {
        this.issueId = issueId;
    }
    
    public Member Event.getMemberId() {
        return memberId;
    }
    
    public void Event.setMemberId(Member memberId) {
        this.memberId = memberId;
    }
    
    public Suggestion Event.getSuggestion() {
        return suggestion;
    }
    
    public void Event.setSuggestion(Suggestion suggestion) {
        this.suggestion = suggestion;
    }
    
    public Calendar Event.getOccurrence() {
        return occurrence;
    }
    
    public void Event.setOccurrence(Calendar occurrence) {
        this.occurrence = occurrence;
    }
    
    public String Event.getEvent() {
        return event;
    }
    
    public void Event.setEvent(String event) {
        this.event = event;
    }
    
    public String Event.getState() {
        return state;
    }
    
    public void Event.setState(String state) {
        this.state = state;
    }
    
}
